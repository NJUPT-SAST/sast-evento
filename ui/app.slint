import "./assets/font/MiSans-Regular.ttf";
import { Token } from "./global.slint";
import { Button } from "std-widgets.slint";
import { Empty } from "./components/index.slint";
import { 
    ViewManagerBridge,
    AccountManagerBridge,
    MessageManagerBridge,
    ViewManager,
    AccountManager,
    MessageManager,
    ViewName,
    MessageType
} from "./logic/index.slint";

import { 
    LoginOverlay,
    LoginOverlayBridge,
    MenuOverlay,
    MenuOverlayBridge,
    DiscoveryPage,
    DiscoveryPageBridge,
    SearchPage,
    SearchPageBridge,
    HistoryPage,
    HistoryPageBridge,
    MyEventPage,
    MyEventPageBridge,
    DetailPage,
    DetailPageBridge,
    AboutPage,
    AboutPageBridge,
    SettingPage,
    SettingPageBridge
} from "./views/index.slint";
import { SButton } from "modules/surrealism-ui/index.slint";
import { SAlert } from "modules/surrealism-ui/src/alert/index.slint";

// export for C++ interact
export { 
    ViewManagerBridge,
    AccountManagerBridge,
    MessageManagerBridge,
    ViewManager,
    AccountManager,
    MessageManager,
    ViewName,
    MessageType,
    LoginOverlayBridge,
    MenuOverlayBridge,
    DiscoveryPageBridge,
    SearchPageBridge,
    HistoryPageBridge,
    MyEventPageBridge,
    DetailPageBridge,
    AboutPageBridge,
    SettingPageBridge,
}

export global UiBridge {
    in-out property <int> name;
}

component OverlayRegion inherits Empty {
    if ViewManager.is-show(ViewName.LoginOverlay): login-overlay := LoginOverlay { }
    if ViewManager.is-show(ViewName.MenuOverlay): menu-overlay := MenuOverlay { }
}

component PageRegion inherits Empty {
    if ViewManager.is-show(ViewName.DiscoveryPage): discovery-page := DiscoveryPage { }
    if ViewManager.is-show(ViewName.SearchPage): search-page := SearchPage { }
    if ViewManager.is-show(ViewName.HistoryPage): history-page := HistoryPage { }
    if ViewManager.is-show(ViewName.MyEventPage): myEvent-page := MyEventPage { }
    if ViewManager.is-show(ViewName.DetailPage): detail-page := DetailPage { }
    if ViewManager.is-show(ViewName.AboutPage): about-page := AboutPage { }
    if ViewManager.is-show(ViewName.SettingPage): setting-page := SettingPage { }
}

component Toast inherits Rectangle {
    clip: true;
    // TODO: bk with type
    background: Token.color.surface-variant;
    border-radius: 8px;
    height: 54px;
    content := HorizontalLayout {
        padding: 16px;
        spacing: 8px;
        alignment: start;
        Rectangle {
            width: 24px;
            Image {
                height: 24px;
                width: 24px;
                // TODO: find icons
                source: Token.image.display.no-image;
            }
        }

        Text {
            max-width: self.preferred-width;
            vertical-alignment: center;
            horizontal-alignment: left;
            text: MessageManager.content;
            // TODO: replace
            color: Token.color.on-surface-variant;
            font-size: Token.font.body.large.size;
            wrap: no-wrap;
        }
    }
}

component BackBottom inherits SButton {
    height: 48px;
    width: 48px;
    border-radius: self.width / 2;
    text: "";
    background: self.has-hover ? Token.color.surface-container-high : Token.color.surface-container;
    border-color: self.has-hover ? Token.color.surface-container-high : Token.color.surface-container;
    drop-shadow-color: Token.color.surface;
    Image {
        height: 24px;
        width: 24px;
        source: Token.image.icon.arrow-left.normal;
    }

    clicked => {
        ViewManager.prior-view();
    }
}

component NavBarItem inherits Rectangle {
    in property <image> image;
    in property <string> content;
    in property <ViewName> target;
    property <bool> selected:ViewManager.is-show(target);
    pure function getBackdround() -> color {
        if (!selected) {
            return area.has-hover ? Token.color.surface-container-high : transparent;
        } else {
            return transparent;
        }
    }
    preferred-height: 100%;
    preferred-width: 100%;
    border-radius: self.height / 2;
    background: getBackdround();
    area := TouchArea {
        clicked => {
            ViewManager.clean-navigate-to(target);
        }
        mouse-cursor: pointer;
    }

    content := HorizontalLayout {
        // height: 48px;
        // width: 120px;
        spacing: 8px;
        alignment: center;
        Rectangle {
            preferred-height: 24px;
            preferred-width: 24px;
            Image {
                width: 24px;
                height: self.width;
                source: root.image;
            }
        }

        Text {
            horizontal-alignment: center;
            vertical-alignment: center;
            color: Token.color.on-surface;
            font-size: Token.font.title.medium.size;
            font-weight: Token.font.title.medium.weight;
            text: root.content;
        }
    }

    animate background {
        duration: 200ms;
        easing: ease-in-out;
    }
}

component NavBar inherits Rectangle {
    in property <[{icon:image, content:string, target:ViewName}]> nav-views;
    height: 48px;
    border-radius: self.height / 2;
    background: Token.color.surface-container;
    pure function get-navbar-current-index() -> int {
        if (ViewManager.is-show(nav-views[0].target)) {
            return 0;
        }
        if (ViewManager.is-show(nav-views[1].target)) {
            return 1;
        }
        if (ViewManager.is-show(nav-views[2].target)) {
            return 2;
        }
        return -1;
    }
    Rectangle {
        height: 100%;
        width: root.width / nav-views.length;
        visible: root.get-navbar-current-index() != -1;
        border-radius: self.height / 2;
        background: Token.color.primary-container;
        x: root.get-navbar-current-index() * self.width;
        z: -1;
        animate x {
            duration: 400ms;
            easing: ease-in-out;
        }
    }

    HorizontalLayout {
        for item in root.nav-views: Rectangle {
            NavBarItem {
                image: item.icon;
                content: item.content;
                target: item.target;
            }
        }
    }
}

component ProfileBottom inherits SButton {
    height: 48px;
    width: 48px;
    border-radius: self.width / 2;
    text: "";
    background: self.has-hover ? Token.color.surface-container-high : Token.color.surface-container;
    border-color: self.has-hover ? Token.color.surface-container-high : Token.color.surface-container;
    drop-shadow-color: Token.color.surface;
    Image {
        height: 24px;
        width: 24px;
        source: Token.image.icon.me.normal;
    }

    clicked => {
        ViewManager.navigate-to(ViewName.MenuOverlay);
    }
}

export component App inherits Window {
    title: "SAST Evento";
    default-font-family: "MiSans";
    min-width: 500px;
    min-height: 400px;
    preferred-width: 1024px;
    preferred-height: 634px;
    background: Token.color.surface;
    icon: Token.image.icon.evento;
    Toast {
        x: root.width - self.width - 16px;
        y: root.height + 16px;
        width: parent.width * (1 - 0.618);
        states [
            visible when MessageManager.visible: {
                y: root.height - self.height - 16px;
                in {
                    animate y {
                        duration: 200ms;
                        easing: ease-out-quart;
                    }
                }
                out {
                    animate y {
                        delay: MessageManager.timeout;
                        duration: 200ms;
                        easing: ease-in-quart;
                    }
                }
            }
            invisible when !MessageManager.visible: {
                y: root.height + 16px;
            }
        ]
    }

    VerticalLayout {
        heading := HorizontalLayout {
            padding: 8px;
            height: 64px;
            spacing: 8px;
            Rectangle {
                width: 48px;
                BackBottom { }
            }

            NavBar {
                min-width: 360px;
                horizontal-stretch: 1;
                nav-views: [
                    {
                        icon:Token.image.icon.home.normal,
                        content:"活动广场",
                        target:ViewName.DiscoveryPage,
                    },
                    {
                        icon:Token.image.icon.department,
                        content:"部门活动",
                        target:ViewName.SearchPage,
                    },
                    {
                        icon:Token.image.icon.schedule.normal,
                        content:"活动日程",
                        target:ViewName.MyEventPage,
                    },
                ];
            }

            Rectangle {
                width: 48px;
                ProfileBottom { }
            }
        }

        PageRegion { }
    }

    OverlayRegion {
        height: 100%;
        width: 100%;
        z: 1;
    }
}
