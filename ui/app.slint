import "./assets/font/MiSans-Regular.ttf";
import { Token } from "./global.slint";
import { Button } from "std-widgets.slint";
import { 
    Empty,
    Toast
} from "./components/index.slint";
import { 
    ViewManagerBridge,
    AccountManagerBridge,
    MessageManagerBridge,
    ViewManager,
    AccountManager,
    MessageManager,
    ViewName,
    MessageType
} from "./logic/index.slint";

import { 
    LoginOverlay,
    LoginOverlayBridge,
    MenuOverlay,
    MenuOverlayBridge,
    DiscoveryPage,
    DiscoveryPageBridge,
    SearchPage,
    SearchPageBridge,
    HistoryPage,
    HistoryPageBridge,
    MyEventPage,
    MyEventPageBridge,
    DetailPage,
    DetailPageBridge,
    AboutPage,
    AboutPageBridge,
    SettingPage,
    SettingPageBridge
} from "./views/index.slint";
import { StateLayer } from "./components/index.slint";
import { GlobalProps } from "modules/surrealism-ui/themes/src/index.slint";

// export for C++ interact
export { 
    ViewManagerBridge,
    AccountManagerBridge,
    MessageManagerBridge,
    ViewManager,
    AccountManager,
    MessageManager,
    ViewName,
    MessageType,
    LoginOverlayBridge,
    MenuOverlayBridge,
    DiscoveryPageBridge,
    SearchPageBridge,
    HistoryPageBridge,
    MyEventPageBridge,
    DetailPageBridge,
    AboutPageBridge,
    SettingPageBridge,
}

export global UiBridge {
    in-out property <int> name;
}

component OverlayRegion inherits Empty {
    if ViewManager.is-show(ViewName.LoginOverlay): login-overlay := LoginOverlay { }
    if ViewManager.is-show(ViewName.MenuOverlay): menu-overlay := MenuOverlay { }
}

component PageRegion inherits Empty {
    if ViewManager.is-show(ViewName.DiscoveryPage): discovery-page := DiscoveryPage { }
    if ViewManager.is-show(ViewName.SearchPage): search-page := SearchPage { }
    if ViewManager.is-show(ViewName.HistoryPage): history-page := HistoryPage { }
    if ViewManager.is-show(ViewName.MyEventPage): myEvent-page := MyEventPage { }
    if ViewManager.is-show(ViewName.DetailPage): detail-page := DetailPage { }
    if ViewManager.is-show(ViewName.AboutPage): about-page := AboutPage { }
    if ViewManager.is-show(ViewName.SettingPage): setting-page := SettingPage { }
}

component CircleButton inherits Rectangle {
    in property <image> image;
    in property <color> surface: Token.color.surface-container;
    in property <color> on-surface: Token.color.on-surface;
    callback clicked <=> area.clicked;
    clip: true;
    height: 48px;
    width: 48px;
    border-radius: self.width / 2;
    background: surface;
    area := TouchArea {
        mouse-cursor: pointer;
    }

    StateLayer {
        background: on-surface;
        is-hover: area.has-hover;
        is-press: area.pressed;
    }

    Image {
        height: 24px;
        width: 24px;
        source: image;
        colorize: on-surface;
    }
}

component NavBarItem inherits Rectangle {
    in property <image> image;
    in property <string> content;
    in property <ViewName> target;
    // property <color> surface: Token.color.surface;
    property <color> on-surface: Token.color.on-surface;
    clip: true;
    border-radius: self.height / 2;
    area := TouchArea {
        clicked => {
            ViewManager.clean-navigate-to(target);
        }
        mouse-cursor: pointer;
    }

    StateLayer {
        background: on-surface;
        is-hover: area.has-hover;
        is-press: area.pressed;
    }

    content := HorizontalLayout {
        spacing: 8px;
        alignment: center;
        Rectangle {
            preferred-height: 24px;
            preferred-width: 24px;
            Image {
                width: 24px;
                height: self.width;
                source: root.image;
                colorize: on-surface;
            }
        }

        Text {
            horizontal-alignment: center;
            vertical-alignment: center;
            color: on-surface;
            font-size: Token.font.title.medium.size;
            font-weight: Token.font.title.medium.weight;
            text: root.content;
        }
    }
}

component NavBar inherits Rectangle {
    in property <[{icon:image, content:string, target:ViewName}]> nav-views;
    height: 48px;
    border-radius: self.height / 2;
    background: Token.color.surface-container;
    active-indicator := Rectangle {
        x: root.get-navbar-current-index() * self.width;
        height: 100%;
        width: root.width / nav-views.length;
        border-radius: self.height / 2;
        visible: root.get-navbar-current-index() != -1;
        background: Token.color.primary-container;
        animate x {
            duration: 300ms;
            easing: ease-out-quart;
        }
    }

    HorizontalLayout {
        for item in root.nav-views: Rectangle {
            NavBarItem {
                image: item.icon;
                content: item.content;
                target: item.target;
            }
        }
    }

    pure function get-navbar-current-index() -> int {
        if (ViewManager.is-show(nav-views[0].target)) {
            return 0;
        }
        if (ViewManager.is-show(nav-views[1].target)) {
            return 1;
        }
        if (ViewManager.is-show(nav-views[2].target)) {
            return 2;
        }
        return -1;
    }
}

export component App inherits Window {
    title: "SAST Evento";
    default-font-family: "MiSans";
    min-width: 500px;
    min-height: 400px;
    preferred-width: 1024px;
    preferred-height: 634px;
    background: Token.color.surface;
    icon: Token.image.icon.evento;
    init => {
        GlobalProps.theme = Token.surrealism-ui-default-theme;
        GlobalProps.font.font-family = "MiSans";
    }
    VerticalLayout {
        heading := HorizontalLayout {
            padding: 8px;
            height: 64px;
            spacing: 8px;
            CircleButton {
                image: Token.image.icon.arrow-left;
                clicked => {
                    ViewManager.prior-view();
                }
            }

            NavBar {
                min-width: 360px;
                horizontal-stretch: 1;
                nav-views: [
                    {
                        icon:Token.image.icon.home,
                        content:"活动广场",
                        target:ViewName.DiscoveryPage,
                    },
                    {
                        icon:Token.image.icon.department,
                        content:"部门活动",
                        target:ViewName.SearchPage,
                    },
                    {
                        icon:Token.image.icon.schedule,
                        content:"活动日程",
                        target:ViewName.MyEventPage,
                    },
                ];
            }

            CircleButton {
                image: Token.image.icon.me;
                clicked => {
                    ViewManager.navigate-to(ViewName.MenuOverlay);
                }
            }
        }

        PageRegion { }
    }

    OverlayRegion {
        height: 100%;
        width: 100%;
    }

    Toast {
        x: root.width - self.width - 16px;
        y: root.height + 16px;
        width: self.min-width > (parent.width * (1 - 0.618) / 2) ? self.preferred-width : parent.width * (1 - 0.618) / 2;
        states [
            visible when MessageManager.visible: {
                y: root.height - self.height - 16px;
                in {
                    animate y {
                        duration: 200ms;
                        easing: ease-out-quart;
                    }
                }
                out {
                    animate y {
                        duration: 200ms;
                        easing: ease-in-quart;
                    }
                }
            }
            invisible when !MessageManager.visible: {
                y: root.height + 16px;
            }
        ]
    }
}
