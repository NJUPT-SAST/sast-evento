import { Token } from "../../global.slint";
import { Page, Button } from "../../components/index.slint";
import { Switch, ComboBox, ScrollView } from "std-widgets.slint";
import { MessageManager, MessageType } from "../../logic/index.slint";

export global SettingPageBridge {
    in-out property <int> theme-index;
    in-out property <bool> notice-begin;
    in-out property <bool> notice-end;
    in-out property <bool> minimal-to-tray;
    in property <string> cache-size: "0B";
    public function change-theme() {
        if (theme-index == 1) {
            Token.set-display-mode(ColorScheme.light);
        } else if (theme-index == 2) {
            Token.set-display-mode(ColorScheme.dark);
        }
    }
    callback theme-changed();
    callback notice-begin-changed();
    callback notice-end-changed();
    callback minimal-to-tray-changed();
    callback clear-cache();
}

component SettingItem inherits Rectangle {
    height: 40px;
    in property <string> name;
    in property <bool> supported: true;
    HorizontalLayout {
        alignment: LayoutAlignment.space-between;
        Text {
            text: name;
            color: root.supported ? Token.color.on-surface : Token.color.outline;
            font-size: Token.font.body.large.size;
            font-weight: Token.font.body.large.weight;
            vertical-alignment: center;
        }

        @children
    }
}

component Divider inherits Rectangle {
    background: Token.color.outline-variant;
    width: 80%;
    height: 1px;
}

export component SettingPage inherits Page {
    ScrollView {
        TouchArea {
            pointer-event(e) => {
                if (e.button == PointerEventButton.left) {
                    theme-box.clear-focus();
                }
            }
        }

        VerticalLayout {
            alignment: LayoutAlignment.start;
            padding: 50px;
            spacing: 10px;
            Text {
                text: @tr("设置");
                font-size: Token.font.display.medium.size;
                font-weight: Token.font.display.medium.weight;
            }

            Rectangle {
                height: 5px;
            }

            Divider { }

            SettingItem {
                name: @tr("主题");
                theme-box := ComboBox {
                    width: 200px;
                    model: [@tr("跟随系统"), @tr("浅色"), @tr("深色")];
                    current-index <=> SettingPageBridge.theme-index;
                    selected => {
                        SettingPageBridge.change-theme();
                        if (SettingPageBridge.theme-index == 0) {
                            MessageManager.show-message(@tr("下次启动时生效"), MessageType.info);
                        }
                        SettingPageBridge.theme-changed();
                    }
                }
            }

            Divider { }

            SettingItem {
                name: @tr("活动开始前提醒");
                Switch {
                    checked <=> SettingPageBridge.notice-begin;
                    toggled => {
                        SettingPageBridge.notice-begin-changed();
                    }
                }
            }

            SettingItem {
                name: @tr("活动结束后提醒反馈");
                Switch {
                    checked <=> SettingPageBridge.notice-end;
                    toggled => {
                        SettingPageBridge.notice-end-changed();
                    }
                }
            }

            SettingItem {
                name: @tr("关闭窗口后最小化到托盘");
                Switch {
                    checked <=> SettingPageBridge.minimal-to-tray;
                    toggled => {
                        SettingPageBridge.minimal-to-tray-changed();
                    }
                }
            }

            Divider { }

            SettingItem {
                name: @tr("磁盘缓存：") + SettingPageBridge.cache-size;
                Button {
                    content: @tr("清除缓存");
                    clicked => {
                        SettingPageBridge.clear-cache();
                        MessageManager.show-message(@tr("缓存已清除"), MessageType.success);
                    }
                }
            }
        }
    }
}
