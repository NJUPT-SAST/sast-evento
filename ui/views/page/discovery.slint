import { Token } from "../../global.slint";
import { Page, Empty } from "../../components/index.slint";
import { SCarousel } from "../../modules/surrealism-ui/index.slint";
import { EventoImageToken } from "../../assets/image/image_token.slint";
import { EventoStyleToken } from "../../logic/style_token.slint";
import { DefaultSCarouselProps } from "../../modules/surrealism-ui/themes/src/carousel.slint";
import { HorizontalBox } from "std-widgets.slint";

export global DiscoveryPageBridge { }

export component DiscoveryPage inherits Page {
    // TODO: implement Discovery
    // optional
    background := Empty { }

    layout := VerticalLayout {
        visible: false;
        x: 0;
        y: 0;
        width: 100%;
        height: 100%;
    }

    body := Empty {
        x: 0;
        y: 0;
        width: 100%;
        height: 100%;
        //Text {
        //    text: "活动广场（用于发现活动）\n  进行中、未开始\n  （需要跳转到历史活动页面，需要多考虑一下）";
        //}
        VerticalLayout {
            Rectangle {
                width: 100%;
                height: 50%;
                // 这里摆放轮播图
                //Text {
                //    text: "轮播图(活动广场)";
                //}
                SCarousel {
                    height: parent.height;
                    width: parent.width;
                    fold-height: parent.height;
                    active: 3;
                    focus-main: true;
                    fit: contain;
                    sources: [
                        EventoImageToken.image.display.event.cpp[0],
                        EventoImageToken.image.display.event.cpp[1],
                        EventoImageToken.image.display.event.cpp[2],
                    ];
                }
            }

            // 正在进行的活动
            Rectangle {
                width: 100%;
                height: 50%;
                VerticalLayout {
                    Rectangle {
                        height: 50%;
                        Flickable {
                            in-out property <int> sum_of_blocks: 7;

                            // calculate the number of blocks
                            // the num of displayed blocks depends on the actual width of the window
                            property <int> block_num: 0;
                            // what is the proper k ???
                            property <int> k: 10;
                            pure public function calcBlockNum(sum_of_blocks: int) -> int {
                                if (self.width > k * 100px) {
                                    return sum_of_blocks > 4 ? 4 : sum_of_blocks;
                                } else if (self.width > k * 50px) {
                                    return sum_of_blocks > 3 ? 3 : sum_of_blocks;
                                } else if (self.width > k * 25px) {
                                    return sum_of_blocks > 2 ? 2 : sum_of_blocks;
                                }
                                return 1;
                            }

                            property <int> actual_shown_block_num: calcBlockNum(sum_of_blocks);

                            height: 80%;
                            width: parent.width;
                            viewport-height: parent.height;
                            viewport-width: (parent.width / actual_shown_block_num * sum_of_blocks);
                            HorizontalLayout {
                                Rectangle {
                                    width: root.width / actual_shown_block_num;
                                    background: #919191;
                                }
                                Rectangle {
                                    width: root.width / actual_shown_block_num;
                                    background: #39c5bb;
                                }
                                Rectangle {
                                    width: root.width / actual_shown_block_num;
                                    background: #66ccff;
                                }
                                Rectangle {
                                    width: root.width / actual_shown_block_num;
                                    background: #b30074;
                                }
                                Rectangle {
                                    width: root.width / actual_shown_block_num;
                                    background: #66ccff;
                                }
                                Rectangle {
                                    width: root.width / actual_shown_block_num;
                                    background: #39c5bb;
                                }
                                Rectangle {
                                    width: root.width / actual_shown_block_num;
                                    background: #919191;
                                }
                            }    
                        }
                    }
                    Rectangle {
                        background: #1e1e2e;
                        height: 50%;
                        Text {
                            text: "最新的活动";
                        }
                    }
                }
            }
        }
    }
}
