import { Token } from "../../global.slint";
import { ScrollView } from "std-widgets.slint";
import { Button, ButtonType, LoadingAnimation, Page, PageState, Empty, EventStruct, EventCardGroup } from "../../components/index.slint";

export global DiscoveryPageBridge {
    in-out property <int> image-index: 0;
    callback image-manually-changed;
    in property <PageState> active-events-state: PageState.normal;
    in property <PageState> latest-events-state: PageState.normal;
    in property <[EventStruct]> active-events: [];
    in property <[EventStruct]> latest-events: [];
    in property <[image]> carousel-source: [
        Token.image.display.event.default[0],
        Token.image.display.event.default[1],
        Token.image.display.event.default[2],
    ];
    callback load-active-events();
    callback load-latest-events();
    callback navigate-to-detail(EventStruct);
}

export component ImageCarousel inherits Rectangle {
    in property <[image]> sources;
    in-out property <int> current-index: 0;
    border-radius: 12px;
    clip: true;

    HorizontalLayout {
        x: -(current-index * root.width);
        animate x {
            duration: 300ms;
            easing: ease-in;
        }
        for src in sources: Image {
            width: root.width;
            height: root.height;
            image-fit: cover;
            source: src;
        }
    }

    VerticalLayout {
        Empty {
            height: root.height - 24px;
        }

        HorizontalLayout {
            alignment: center;
            spacing: 24px;
            for index in sources.length: Rectangle {
                z: 1;
                width: 12px;
                height: self.width;
                border-radius: self.width / 2;
                background: root.current-index == index ? #CAC4D0 : #79747E;
                animate background {
                    duration: 100ms;
                    easing: ease-in;
                }
                TouchArea {
                    width: 100%;
                    height: 100%;
                    clicked => {
                        current-index = index;
                        DiscoveryPageBridge.image-manually-changed();
                    }
                }
            }
        }
    }
}

export component DiscoveryPage inherits Page {
    ScrollView {
        VerticalLayout {
            padding: 50px;
            padding-top: 10px;
            spacing: 15px;
            ImageCarousel {
                width: 100%;
                height: root.height * 0.5;
                current-index <=> DiscoveryPageBridge.image-index;
                sources: DiscoveryPageBridge.carousel-source;
            }

            if DiscoveryPageBridge.active-events-state == PageState.normal && DiscoveryPageBridge.latest-events-state == PageState.normal && DiscoveryPageBridge.active-events.length == 0 && DiscoveryPageBridge.latest-events.length == 0: Text {
                color: Token.color.inverse-surface;
                font-size: Token.font.title.large.size;
                font-weight: Token.font.label.large.weight;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: @tr("暂时还没有活动哦");
            }

            if DiscoveryPageBridge.active-events.length != 0 || DiscoveryPageBridge.active-events-state != PageState.normal: Text {
                color: Token.color.inverse-surface;
                font-size: Token.font.title.large.size;
                font-weight: Token.font.label.large.weight;
                text: @tr("  正在进行的活动");
            }

            Rectangle {
                if DiscoveryPageBridge.active-events-state == PageState.error: Rectangle {
                    Button {
                        type: ButtonType.filled-tonal;
                        content: @tr("重新加载");
                        clicked => {
                            DiscoveryPageBridge.load-active-events();
                        }
                    }
                }

                if DiscoveryPageBridge.active-events-state == PageState.loading: LoadingAnimation {
                    color: Token.color.on-surface;
                    height: 40px;
                }
            }

            if DiscoveryPageBridge.active-events-state == PageState.normal && DiscoveryPageBridge.active-events.length != 0: Rectangle {
                height: (active-cards.item-height + active-cards.vertical-spacing) * active-cards.row-count;
                active-cards := EventCardGroup {
                    model: DiscoveryPageBridge.active-events;
                    item-clicked(event-struct) => {
                        DiscoveryPageBridge.navigate-to-detail(event-struct);
                    }
                }
            }

            if DiscoveryPageBridge.latest-events.length != 0 || DiscoveryPageBridge.latest-events-state != PageState.normal: Text {
                color: Token.color.inverse-surface;
                font-size: Token.font.title.large.size;
                font-weight: Token.font.label.large.weight;
                text: @tr("  最新的活动");
            }

            Rectangle {
                if DiscoveryPageBridge.latest-events-state == PageState.error: Rectangle {
                    Button {
                        type: ButtonType.filled-tonal;
                        content: @tr("重新加载");
                        clicked => {
                            DiscoveryPageBridge.load-latest-events();
                        }
                    }
                }

                if DiscoveryPageBridge.latest-events-state == PageState.loading: LoadingAnimation {
                    color: Token.color.on-surface;
                    height: 40px;
                }
            }

            if DiscoveryPageBridge.latest-events-state == PageState.normal && DiscoveryPageBridge.latest-events.length != 0: Rectangle {
                height: (latest-cards.item-height + latest-cards.vertical-spacing) * latest-cards.row-count;
                latest-cards := EventCardGroup {
                    model: DiscoveryPageBridge.latest-events;
                    item-clicked(event-struct) => {
                        DiscoveryPageBridge.navigate-to-detail(event-struct);
                    }
                }
            }
        }
    }
}
