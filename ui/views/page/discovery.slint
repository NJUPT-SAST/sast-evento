import { Page } from "../../components/index.slint";
import { EventCardGroup } from "../../components/event_card.slint";
import { EventStruct } from "../../components/event_struct.slint";
import { SCarousel } from "../../modules/surrealism-ui/index.slint";
import { EventoImageToken } from "../../assets/image/image_token.slint";
import { Token } from "../../global.slint";
import { ScrollView } from "std-widgets.slint";
import { Button, ButtonType, LoadingAnimation, PageState } from "../../components/index.slint";

export global DiscoveryPageBridge {
    in property <PageState> active-events-state: PageState.normal;
    in property <PageState> latest-events-state: PageState.normal;
    in property <[EventStruct]> active-events: [];
    in property <[EventStruct]> latest-events: [];
    in property <[image]> slides: [
        EventoImageToken.image.display.event.default[0],
        EventoImageToken.image.display.event.default[1],
        EventoImageToken.image.display.event.default[2],
    ];
    callback load-active-events();
    callback load-latest-events();
    callback navigate-to-detail(EventStruct);
}

export component DiscoveryPage inherits Page {
    ScrollView {
        VerticalLayout {
            padding: 50px;
            spacing: 15px;
            SCarousel {
                width: 100%;
                height: root.height * 0.5;
                fold-height: root.height * 0.5;
                active: 3;
                focus-main: true;
                fit: cover;
                sources: DiscoveryPageBridge.slides;
            }

            if DiscoveryPageBridge.active-events-state == PageState.normal && DiscoveryPageBridge.latest-events-state == PageState.normal && DiscoveryPageBridge.active-events.length == 0 && DiscoveryPageBridge.latest-events.length == 0: Text {
                color: Token.color.inverse-surface;
                font-size: Token.font.title.large.size;
                font-weight: Token.font.label.large.weight;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "暂时还没有活动哦";
            }

            if DiscoveryPageBridge.active-events.length != 0 || DiscoveryPageBridge.active-events-state != PageState.normal: Text {
                color: Token.color.inverse-surface;
                font-size: Token.font.title.large.size;
                font-weight: Token.font.label.large.weight;
                text: "  正在进行的活动";
            }

            if DiscoveryPageBridge.active-events-state == PageState.error: Rectangle {
                Button {
                    type: ButtonType.text;
                    font: Token.font.title.large;
                    content: "重新加载";
                    clicked => {
                        DiscoveryPageBridge.load-active-events();
                    }
                }
            }

            if DiscoveryPageBridge.active-events-state == PageState.loading: LoadingAnimation {
                color: Token.color.on-surface;
                height: 40px;
            }

            if DiscoveryPageBridge.active-events-state == PageState.normal && DiscoveryPageBridge.active-events.length != 0: Rectangle {
                height: (active-cards.item-height + active-cards.vertical-spacing) * active-cards.row-count;
                active-cards := EventCardGroup {
                    model: DiscoveryPageBridge.active-events;
                    item-clicked(event-struct) => {
                        DiscoveryPageBridge.navigate-to-detail(event-struct);
                    }
                }
            }

            if DiscoveryPageBridge.latest-events.length != 0 || DiscoveryPageBridge.latest-events-state != PageState.normal: Text {
                color: Token.color.inverse-surface;
                font-size: Token.font.title.large.size;
                font-weight: Token.font.label.large.weight;
                text: "  最新的活动";
            }

            if DiscoveryPageBridge.latest-events-state == PageState.error: Rectangle {
                Button {
                    type: ButtonType.text;
                    font: Token.font.title.large;
                    content: "重新加载";
                    clicked => {
                        DiscoveryPageBridge.load-latest-events();
                    }
                }
            }

            if DiscoveryPageBridge.latest-events-state == PageState.loading: LoadingAnimation {
                color: Token.color.on-surface;
                height: 40px;
            }

            if DiscoveryPageBridge.latest-events-state == PageState.normal && DiscoveryPageBridge.latest-events.length != 0: Rectangle {
                height: (latest-cards.item-height + latest-cards.vertical-spacing) * latest-cards.row-count;
                latest-cards := EventCardGroup {
                    model: DiscoveryPageBridge.latest-events;
                    item-clicked(event-struct) => {
                        DiscoveryPageBridge.navigate-to-detail(event-struct);
                    }
                }
            }
        }
    }
}
