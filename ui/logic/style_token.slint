import { Palette, Button } from "std-widgets.slint";

// font
struct EventoFontData {
    size: length,
    weight: int,
}

struct EventoFontSize {
    large: EventoFontData,
    medium: EventoFontData,
    small: EventoFontData,
}

// five types: large, headline, title, body, label
// more info: https://m3.material.io/styles/typography/applying-type#ab657e7c-cb93-45ff-92c6-686959dc19ae
struct EventoFontCollection {
    display: EventoFontSize,
    headline: EventoFontSize,
    title: EventoFontSize,
    body: EventoFontSize,
    label: EventoFontSize,
}

// color
// more info: https://m3.material.io/styles/color/roles
struct EventoColorCollection {
    primary-container: color,
    on-primary-container: color,
    surface: color,
    on-surface: color,
    surface-variant: color,
    on-surface-variant: color,
    surface-container-highest: color,
    surface-container-high: color,
    surface-container: color,
    surface-container-low: color,
    surface-container-lowest: color,
    inverse-surface: color,
    inverse-on-surface: color,
    outline: color,
    outline-variant: color,
    error: color,
    on-error: color,
}

export global EventoStyleToken {
    out property <EventoColorCollection> color:{
        primary-container: switcher({ light: #EADDFF, dark: #4F378B }),
        on-primary-container: switcher({ light: #4F378B, dark: #EADDFF }),
        surface: switcher({ light: #FEF7FF, dark: #141218 }),
        on-surface: switcher({ light:#1D1B20, dark:  #E6E0E9 }),
        surface-variant: switcher({ light: #E7E0EC, dark: #49454F }),
        on-surface-variant: switcher({ light: #49454F, dark: #CAC4D0 }),
        surface-container-highest: switcher({ light: #E6E0E9, dark: #36343B }),
        surface-container-high: switcher({ light: #ECE6F0, dark: #2B2930 }),
        surface-container: switcher({ light: #F3EDF7, dark: #211F26 }),
        surface-container-low: switcher({ light: #F7F2FA, dark: #1D1B20 }),
        surface-container-lowest: switcher({ light: #FFFFFF, dark: #0F0D13 }),
        inverse-surface: switcher({ light: #322F35, dark: #E6E0E9 }),
        inverse-on-surface: switcher({ light: #F5EFF7, dark: #322F35 }),
        outline: switcher({ light: #79747E, dark: #938F99 }),
        outline-variant: switcher({ light: #CAC4D0, dark: #49454F }),
        error: switcher({ light: #B3261E, dark: #F2B8B5 }),
        on-error: switcher({ light: #FFFFFF, dark: #601410 }),
    };
    // source: https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    // prefer large, use body.large (16px) for body text
    out property <EventoFontCollection> font:{
        display: {
            large: {
                size: 57px,
                weight: 400,
            },
            medium: {
                size: 45px,
                weight:400,
            },
            small: {
                size: 36px,
                weight:400,
            }
        },
        headline: {
            large: {
                size: 32px,
                weight: 400,
            },
            medium: {
                size: 28px,
                weight: 400,
            },
            small: {
                size: 24px,
                weight: 400,
            }
        },
        title: {
            large: {
                size: 22px,
                weight: 400,
            },
            medium: {
                size: 16px,
                weight: 500,
            },
            small: {
                size: 14px,
                weight: 500,
            }
        },
        body: {
            large: {
                size: 16px,
                weight: 400,
            },
            medium: {
                size: 14px,
                weight: 400,
            },
            small: {
                size: 12px,
                weight:400,
            }
        },
        label: {
            large: {
                size: 14px,
                weight: 500,
            },
            medium: {
                size: 12px,
                weight: 500,
            },
            small: {
                size: 11px,
                weight: 500,
            }
        },
    };
    out property <bool> is-darkmode: Palette.color-scheme == ColorScheme.dark;
    pure function switcher(color: {light:color,dark:color}) -> color {
        return self.is-darkmode ? color.dark : color.light;
    }
}
