import { Token } from "../global.slint";
import { EventStruct } from "./event_struct.slint";
import { Card } from "./card.slint";

export component EventCard inherits Card {
    in-out property <EventStruct> event: {
        summary: "活动标题",
        summary-abbr: "活",
        time: "活动时间",
        location: "活动地点",
        description: "活动内容",
        id: 0
    };
    VerticalLayout {
        header := HorizontalLayout {
            height: abbr-circle.height;
            alignment: LayoutAlignment.space-between;
            abbr-circle := Rectangle {
                width: 28px;
                height: self.width;
                border-radius: self.width / 2;
                background: root.on-surface;
                abbr-text := Text {
                    color: root.inverse-on-surface;
                    text: event.summary-abbr;
                    font-size: Token.font.label.large.size;
                    font-weight: Token.font.label.large.weight;
                }
            }

            pentagon := Image {
                width: 10px;
                vertical-alignment: center;
                colorize: root.on-surface;
                source: Token.image.icon.pentagon;
            }
        }

        event-title := Text {
            min-height: 0;
            preferred-height: 0;
            vertical-stretch: 1;
            vertical-alignment: center;
            color: root.inverse-surface;
            text: event.summary;
            wrap: word-wrap;
            overflow: elide;
            font-size: Token.font.title.large.size;
            font-weight: Token.font.title.large.weight;
        }

        time-label := HorizontalLayout {
            height: 20px;
            spacing: 6px;
            time-icon := Image {
                width: 16px;
                vertical-alignment: center;
                source: Token.image.icon.time;
                colorize: time-text.color;
            }

            time-text := Text {
                horizontal-stretch: 1;
                font-size: Token.font.label.large.size;
                text: event.time;
                overflow: elide;
            }
        }

        location-label := HorizontalLayout {
            height: 20px;
            spacing: 6px;
            location-icon := Image {
                width: 16px;
                vertical-alignment: center;
                source: Token.image.icon.locate;
                colorize: location-text.color;
            }

            location-text := Text {
                horizontal-stretch: 1;
                font-size: Token.font.label.large.size;
                text: event.location;
                overflow: elide;
            }
        }

        description-label := HorizontalLayout {
            height: 20px;
            spacing: 6px;
            description-icon := Image {
                width: 16px;
                vertical-alignment: center;
                source: Token.image.icon.topic;
                colorize: location-text.color;
            }

            description-text := Text {
                horizontal-stretch: 1;
                font-size: Token.font.label.large.size;
                text: event.description;
                overflow: elide;
            }
        }
    }
}

export component EventCardGroup inherits VerticalLayout {
    in-out property <[EventStruct]> model;
    in-out property <length> horizontal-spacing: 20px;
    in-out property <length> vertical-spacing: 20px;
    out property <length> item-height: 188px;
    out property <int> row-count: floor(model.length / 3) * 3 == model.length ? model.length / 3 : floor(model.length / 3) + 1;
    callback item-clicked(EventStruct);

    function row-indexes(start-idx: int) -> [int] {
        if start-idx + 1 < root.model.length {
            if start-idx + 2 < root.model.length {
                return [start-idx, start-idx + 1, start-idx + 2];
            } else {
                return [start-idx, start-idx + 1];
            }
        }
        return [start-idx];
    }

    alignment: start;
    padding: 5px;
    spacing: vertical-spacing;
    for row-idx in row-count: HorizontalLayout {
        property <int> start-idx: row-idx * 3;
        height: root.item-height;
        spacing: horizontal-spacing;
        alignment: start;
        for idx in root.row-indexes(start-idx): EventCard {
            event: root.model[idx];
            width: parent.width / 3 - horizontal-spacing * 2 / 3;
            clicked => {
                root.item-clicked(self.event);
            }
        }
    }
}
