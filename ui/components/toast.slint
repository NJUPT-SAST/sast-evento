import { MessageManager, MessageManagerBridge, MessageType, MessageData, ToastData } from "../logic/message_manager.slint";
import { Token, MdFontData } from "../global.slint";
import { Button } from "./button.slint";
import { Empty } from "view_base.slint";

export component Toast {
    // option
    in property <ToastData> toast-data;
    // out
    out property <int> elevation: toast-data.elevation;
    out property <bool> removed: toast-data.removed;
    // implement
    min-height: 48px;
    min-width: _body.min-width;
    preferred-height: 48px;
    preferred-width: _body.preferred-width;
    private property <color> surface: Token.color.surface-variant;
    private property <color> on-surface: Token.color.on-surface-variant;
    private property <MdFontData> font: Token.font.body.large;
    private property <bool> have-icon: false;
    private property <image> icon;
    private property <MessageData> message-data: MessageManager.get-message(toast-data.id);
    // private property <MessageData> message-data: { content: "123", type: MessageType.Info };
    _body := Rectangle {
        x: 0;
        y: 0;
        clip: true;
        height <=> root.height;
        width <=> root.width;
        background: surface;
        border-radius: 8px;
        _area := TouchArea {
            clicked => {
                MessageManager.hide-message(toast-data.id);
            }
        }

        _content := HorizontalLayout {
            padding-left: 16px;
            padding-right: 16px;
            spacing: 8px;
            alignment: start;
            if have-icon: _icon := Empty {
                width: 24px;
                height: 100%;
                Image {
                    height: 24px;
                    width: 24px;
                    source: icon;
                    colorize: on-surface;
                }
            }
            Empty {
                height: 100%;
                _text := Text {
                    text: message-data.content;
                    color: on-surface;
                    font-size: font.size;
                    font-weight: font.weight;
                }
            }

            states [
                have-icon when have-icon: {
                    padding-left: 12px;
                }
            ]
        }
    }

    states [
        error when message-data.type == MessageType.error: {
            have-icon: true;
            icon: Token.image.icon.error;
            surface: Token.color.error;
            on-surface: Token.color.on-error;
        }
        warning when message-data.type == MessageType.warning: {
            have-icon: true;
            icon: Token.image.icon.error;
        }
        success when message-data.type == MessageType.success: {
            have-icon: true;
            icon: Token.image.icon.check-circle;
        }
        info when message-data.type == MessageType.info: {
            have-icon: false;
        }
    ]
}
