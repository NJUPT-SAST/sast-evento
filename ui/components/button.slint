import { StateLayer } from "state_layer.slint";
import { Token } from "../global.slint";
import { LoadingAnimation } from "animation.slint";

export component LoadingButton inherits Rectangle {
    // available option
    in property <color> on-surface: Token.color.on-surface;
    in property <color> surface: Token.color.surface-container;
    in property <bool> is-loading: false;
    in property <string> content: "No Content";
    in property <length> font-size: Token.font.body.large.size;
    height: 40px;
    callback clicked <=> area.clicked;
    // implement detail
    private property <length> max-radius: 20px;
    private property <length> icon-size: 18px;
    private property <length> default-padding: 24px;
    private property <length> icon-padding: 16px;
    private property <length> default-spacing: 8px;
    clip: true;
    background: surface;
    border-radius: self.height / 2 > max-radius ? max-radius : self.height / 2;
    StateLayer {
        background: on-surface;
        is-hover: area.has-hover;
        is-press: area.pressed;
    }

    _spinner := LoadingAnimation {
        x: icon-padding;
        width: icon-size;
        stroke: on-surface;
    }

    _text := Text {
        x: (root.width - self.width) / 2;
        text: content;
        font-size: font-size;
        vertical-alignment: center;
        horizontal-alignment: center;
    }

    area := TouchArea {
        mouse-cursor: pointer;
    }

    states [
        // width = icon-padding + icon-size + default-spacing + _text.width + default-padding
        loading when is-loading: {
            width: icon-padding + icon-size + default-spacing + _text.width + default-padding;
            _text.x: icon-padding + icon-size + default-spacing;
            _spinner.opacity: 1;
            in {
                animate width, _text.x, _spinner.opacity {
                    duration: 200ms;
                    easing: ease-in-out-quint;
                }
            }
            out {
                animate width, _text.x, _spinner.opacity {
                    duration: 200ms;
                    easing: ease-in-out-quint;
                }
            }
        }
        // width = default-padding + _text.width + default-padding
        normal when !is-loading: {
            width: default-padding + _text.width + default-padding;
            _text.x: default-padding;
            _spinner.opacity: 0;
        }
    ]
}

// quick preview
component Example {
    LoadingButton {
        content: "click me";
        clicked => {
            self.is-loading = !self.is-loading;
        }
    }
}
